plugins {
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = "${project.mod_version}"
group = project.base_package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: "official", version: "1.16.5"

    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forxe.enabledGameTestNamespaces', project.mod_name

            args '--username', 'Dev2'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', project.mod_name

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_name, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${project.mod_name}.refmap.json"

    config "${project.mod_name}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        url 'https://www.cursemaven.com'

        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }

}

dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


    implementation "thedarkcolour:kotlinforforge:${project.kotlinforforge_version}"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'



    // Mod Dependencies
    compileOnly fg.deobf("curse.maven:citadel-331936:3441028")

    compileOnly fg.deobf("curse.maven:ice-and-fire-dragons-264231:4614457")



    compileOnly fg.deobf("curse.maven:effortless-building-302113:4332451")

    compileOnly fg.deobf("curse.maven:hole-filler-mod-440585:3362158")

    compileOnly fg.deobf("curse.maven:autoreglib-250363:3326041")
    compileOnly fg.deobf("curse.maven:quark-243121:3642325")


    compileOnly fg.deobf("curse.maven:selene-499980:3517008")
    compileOnly fg.deobf("curse.maven:supplementaries-412082:4802243")

    compileOnly fg.deobf("curse.maven:mantle-74924:3631982")
    compileOnly fg.deobf("curse.maven:tinkers-construct-74072:3695126")

    compileOnly fg.deobf("curse.maven:born-in-chaos-686437:4030231")

    compileOnly fg.deobf("curse.maven:storage-drawers-223852:3776277")


    compileOnly fg.deobf("com.jozufozu.flywheel:Flywheel:1.16-0.2.5.53")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.16.5-1.0.10")
    compileOnly fg.deobf("com.simibubi.create:Create:mc1.16.5_v0.3.2g+483")



}


jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Octavito",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Octavito",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.register('printVersionName') {
    println project.version
}

tasks.register('printMCVersionName') {
    println project.mc_version
}